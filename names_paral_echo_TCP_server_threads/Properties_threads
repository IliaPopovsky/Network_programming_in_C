Создание потока требует в 10-100 раз меньше времени, чем создание процесса.
Все потоки одного процесса совместно используют его глобальные переменные, поэтому им легко обмениваться информацией, но это приводит к необходимости синхронизации (последоватизации).
Однако общими становятся не только глобальные переменные. Все потоки одного процесса разделяют:
- инструкции процесса;
- большую часть данных;
- открытые файлы (например, дескрипторы);
- обработчики сигналов и вообще настройки для работы с сигналами (действие сигнала);
- текущий рабочий каталог;
- идентификаторы пользователя и группы пользователей;
У каждого потока имеются собственные:
- идентификатор потока;
- набор регистров, включая счетчик команд и указатель стека;
- стек (для локальных переменных и адресов возврата);
- переменная errno;
- маска сигналов;
- приоритет;

                                                                                                                                           У.Р. Стивенс "UNIX разработка сетевых приложений. 3-е издание"
=========================================================================================================================================================================================================
11.1 Введение
Все потоки внутри процесса имеют доступ к одним и тем же компонентам процесса, таким как файловые дескрипторы или глобальные переменные.

Всякий раз при попытке организовать одновременный доступ нескольких пользователей к одному и тому же ресурсу приходится сталкиваться с проблемой согласования доступа.


11.2 Понятие потоков
Типичный процесс в UNIX можно представить как имеющий единственный поток управления - каждый процесс в один момент времени решает только одну задачу. При использовании нескольких потоков управления можно спроектировать приложение, которое будет решать одновременно несколько задач в рамках единственного процесса, где каждый поток решает отдельную задачу. Такой подход имеет следующие преимущества:
- Можно значительно упростить код, обрабатывающий асинхронные (параллельные, одновременные) события, привязав каждый тип события к отдельному потоку. В результате каждый поток сможет обслуживать свое событие, используя для этого синхронную (последовательную) модель программирования, которая намного проще асинхронной (параллельной).
- Чтобы организовать совместный доступ нескольких процессов к одним и тем же ресурсам, таким как общая память или файловые дескрипторы, необходимо использовать достаточно сложные механизмы синхронизации (последоватизации), предоставляемые операционной системой. Потоки же, в отличие от процессов, автоматически получают доступ к одному и тому же адресному пространству своего процесса владельца и файловым дескрипторам.


                                                                                                                                     У.Р. Стивенс "UNIX. Профессиональное программирование. 3-е издание"
=========================================================================================================================================================================================================
